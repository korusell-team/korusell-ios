//
//  NewPlaceCreationSheet.swift
//  korusell
//
//  Created by Sergey Li on 1/31/24.
//

import SwiftUI
import Kingfisher

struct NewPlaceCreationSheet: View {
    @EnvironmentObject var userManager: UserManager
    
    @State var place: Place = Place(pid: "", latitude: 1, longitude: 1, categories: [])
    @State var image: UIImage? = nil
    
    @State var showImagePicker: Bool = false
    @State var imageUrl: URL? = nil
    @State var alertPresented: Bool = false
    
    @State var isPublic: Bool = false
    @State var phoneIsAvailable: Bool = false
    @State var phone: String = ""
    @State var name: String = ""
    @State var bio: String = ""
    @State var info: String? = ""
    
    var body: some View {
        VStack {
            ScrollView {
                LazyVStack {
                    VStack {
                        ZStack(alignment: .top) {
                            if let image {
                                Image(uiImage: image)
                                    .resizable()
                                    .scaledToFill()
                            } else {
                                KFImage.url(imageUrl)
                                    .resizable()
                                    .placeholder {
                                        ZStack {
                                            VStack {
                                                Text("ü´•")
                                                    .font(bold60f)
                                                Text("–Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
                                                    .foregroundColor(.gray900)
                                                    .multilineTextAlignment(.center)
                                                    .font(light16f)
                                            }
                                        }.frame(width: Size.w(190), height: Size.w(190), alignment: .center)
                                    }
                                    .fade(duration: 1)
                                    .cancelOnDisappear(true)
                                
//                                CachedAsyncImage(url: imageUrl, urlCache: .imageCache) { phase in
//                                    switch phase {
//                                    case .empty:
//                                        ZStack {
//                                            VStack {
//                                                Text("ü´•")
//                                                    .font(bold60f)
//                                                Text("–Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
//                                                    .foregroundColor(.gray900)
//                                                    .multilineTextAlignment(.center)
//                                                    .font(light16f)
//                                            }
//                                        }.frame(width: Size.w(190), height: Size.w(190), alignment: .center)
//                                    case .success(let image):
//                                        ZStack(alignment: .top) {
//                                            image
//                                                .resizable()
//                                                .scaledToFill()
//                                        }
//                                    case .failure:
//                                        ZStack {
//                                            VStack {
//                                                Text("üòñ")
//                                                    .font(bold60f)
//                                                Text("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
//                                                    .foregroundColor(.gray900)
//                                                    .multilineTextAlignment(.center)
//                                                    .font(light16f)
//                                            }
//                                        }.frame(width: Size.w(190), height: Size.w(190), alignment: .center)
//                                    @unknown default:
//                                        EmptyView()
//                                    }
//                                }
                                .ignoresSafeArea()
                            } ///else
                        }
                        
                        .frame(width: Size.w(190), height: Size.w(190), alignment: .top)
                        .background(Color.app_white.opacity(0.01))
                        .cornerRadius(30)
                        .onTapGesture {
                            showImagePicker = true
                        }
                        .sheet(isPresented: $showImagePicker) {
                            ImagePicker(image: $image)
                                .ignoresSafeArea(.all)
                        }
                        .padding(.top, Size.safeArea().top + Size.w(40))
                        
                        HStack {
                            Button(action: {
                                showImagePicker = true
                            }) {
                                Text("–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
                            }
                        }.frame(maxWidth: .infinity, alignment: .center)
                        
                    }
                    
                    VStack(spacing: 0) {
//                        CustomSection(footer: "–°–¥–µ–ª–∞–π—Ç–µ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—É–±–ª–∏—á–Ω—ã–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –í–∞—Å –≤ —Å–ø–∏—Å–∫–µ") {
//                            Toggle(isOn: $isPublic) {
//                                MenuLabelView(title: "–ü—É–±–ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç", icon: "eyes", bgColor: Color.blue)
//                            }
//                        }
                        
                        CustomSection(footer: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ú–µ—Å—Ç–∞") {
                            TextField(text: $place.title.bound) {
                                Text("–ù–∞–∑–≤–∞–Ω–∏–µ")
                            }
                            .autocorrectionDisabled()
                        }
                        
                        CustomSection(footer: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞") {
                            TextField(text: $place.phone.bound) {
                                Text("–¢–µ–ª–µ—Ñ–æ–Ω")
                            }
                            .keyboardType(.phonePad)
                            .autocorrectionDisabled()
                        }
                        
                        CustomSection(footer: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≥–æ—Ä–æ–¥.\n–ü—Ä–∏–º–µ—Ä:  –ö–∞—Ñ–µ. –ê–Ω—Å–∞–Ω") {
                            VStack(spacing: 15) {
                                // TODO: implement these two for places
                                //                                CategoryEditView(user: $user, categories: cc.cats)
                                //                                Divider()
                                //                                CityEditView(user: $user, cities: cc.cities)
                            }
                            
                        }
                        
                        CustomSection(header: "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ú–µ—Å—Ç–µ:", footer: "–ü—Ä–∏–º–µ—Ä: –õ—É—á—à–µ–µ –°–¢–û –≤ –≥–æ—Ä–æ–¥–µ –ò–Ω—á—Ö–æ–Ω!") {
                            TextField(text: $place.bio.bound) {
                                Text("–ü–∞—Ä—É —Å–ª–æ–≤, —Ç—É–¥–∞ - —Å—é–¥–∞")
                            }
                        }
                        
                        CustomSection(header: "–û –ú–µ—Å—Ç–µ:", footer: "–í —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ª–æ–∂–∏—Ç—å—Å—è –ø–æ –ø–æ–ª–Ω–æ–π –∏ –æ–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–µ –ú–µ—Å—Ç–æ –±–æ–ª—å—à–∏–º –ø–æ–ª–æ—Ç–Ω–æ–º —Ç–µ–∫—Å—Ç–∞.") {
                            EditInfoView(info: $place.info)
                        }
                        
                        CustomSection(header: "–°–æ—Ü—Å–µ—Ç–∏ –∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã:", footer: "") {
                            VStack(spacing: 13) {
                                ForEach(socialType.allCases, id: \.self.id) { type in
                                    // TODO: make it for places
                                    //                                    EditSocialButton(type: type, contact: $user)
                                    Text(type.providerName)
                                    if type != .twitter {
                                        Divider()
                                    }
                                }
                            }
                        }
                        
                        // TODO: SAVE button
                        CustomSection {
                            Button(action: {
                                alertPresented = true
                            }) {
                                Text("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
                                    .foregroundColor(.red)
                                    .frame(maxWidth: .infinity, alignment: .center)
                            }
                        }
                        .alertPatched(isPresented: $alertPresented) {
                            Alert(title: Text("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–∞—à –∞–∫–∫–∞—É–Ω—Ç?"),
                                  message: Text("–í—Å–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏ –Ω–µ –±—É–¥—É—Ç –ø–æ–¥–ª–µ–∂–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é"),
                                  primaryButton: .default(Text("–û—Ç–º–µ–Ω–∞"), action: { alertPresented = false }),
                                  secondaryButton: .destructive(Text("–£–¥–∞–ª–∏—Ç—å"), action: { userManager.deleteUser() }))
                        }
                    }
                    .background(Color.gray10.opacity(0.1))
                    .onTapGesture {
                        UIApplication.shared.endEditing()
                    }
                    
                    Spacer().frame(height: Size.w(200))
                }
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity).ignoresSafeArea()
        .background(Color.app_white)
    }
}

#Preview {
    NewPlaceCreationSheet()
}
